{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar styles = {\n  \"switch\": \"_2-ZbH\",\n  \"switchBg\": \"_3QxTi\",\n  \"switchInput\": \"_3maKS\",\n  \"switchHandle\": \"_ju7HT\",\n  \"isChecked\": \"_3YMB2\"\n};\n\nvar ToggleSwitch = function ToggleSwitch(_ref) {\n  var className = _ref.className,\n      checked = _ref.checked,\n      onChange = _ref.onChange,\n      onColor = _ref.onColor,\n      offColor = _ref.offColor,\n      handleColor = _ref.handleColor,\n      focusShadow = _ref.focusShadow,\n      disabled = _ref.disabled,\n      labelProps = _objectWithoutPropertiesLoose(_ref, [\"className\", \"checked\", \"onChange\", \"onColor\", \"offColor\", \"handleColor\", \"focusShadow\", \"disabled\"]);\n\n  var _useState = useState(false),\n      hasOutline = _useState[0],\n      setOutline = _useState[1];\n\n  var _useState2 = useState(0),\n      lastMouseUpTime = _useState2[0],\n      setMouseUpTime = _useState2[1];\n\n  var handleChange = function handleChange() {\n    onChange(!checked);\n  };\n\n  var onMouseUp = function onMouseUp() {\n    setMouseUpTime(Date.now());\n  };\n\n  useEffect(function () {\n    window.addEventListener('mouseup', onMouseUp);\n    return function () {\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n  }, []);\n  return React.createElement(\"label\", Object.assign({\n    style: {\n      cursor: disabled ? 'not-allowed' : 'pointer',\n      filter: disabled ? 'brightness(0.9)' : 'unset'\n    }\n  }, labelProps, {\n    className: styles[\"switch\"] + \" \" + (className || '')\n  }), React.createElement(\"div\", {\n    className: styles.switchBg + \" \" + (checked ? styles.isChecked : ''),\n    style: {\n      backgroundColor: checked ? onColor || '#66bb6a' : offColor || '#cccccc'\n    }\n  }), React.createElement(\"div\", {\n    id: 'dragswitch-handle',\n    className: styles.switchHandle + \" \" + (checked ? styles.isChecked : ''),\n    style: {\n      WebkitTransition: 'transform .2s',\n      MozTransition: 'transform .2s',\n      transition: 'transform .2s',\n      boxShadow: hasOutline ? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px' : undefined,\n      backgroundColor: handleColor || '#ffffff'\n    }\n  }), React.createElement(\"input\", {\n    role: 'switch',\n    \"aria-checked\": checked,\n    type: 'checkbox',\n    defaultChecked: checked,\n    onChange: handleChange,\n    onFocus: function onFocus() {\n      if (Date.now() - lastMouseUpTime > 25) setOutline(true);\n    },\n    onBlur: function onBlur() {\n      setOutline(false);\n    },\n    disabled: disabled,\n    className: styles.switchInput\n  }));\n};\n\nvar DragSwitch = function DragSwitch(_ref) {\n  var className = _ref.className,\n      checked = _ref.checked,\n      onChange = _ref.onChange,\n      onColor = _ref.onColor,\n      offColor = _ref.offColor,\n      handleColor = _ref.handleColor,\n      focusShadow = _ref.focusShadow,\n      disabled = _ref.disabled,\n      labelProps = _objectWithoutPropertiesLoose(_ref, [\"className\", \"checked\", \"onChange\", \"onColor\", \"offColor\", \"handleColor\", \"focusShadow\", \"disabled\"]);\n\n  var switchRef = useRef(null);\n\n  var _useState = useState(checked ? 20 : 0),\n      Xpos = _useState[0],\n      setPos = _useState[1];\n\n  var _useState2 = useState(false),\n      isMouseDown = _useState2[0],\n      setMouseDown = _useState2[1];\n\n  var _useState3 = useState(0),\n      lastMouseUpTime = _useState3[0],\n      setMouseUpTime = _useState3[1];\n\n  var _useState4 = useState(false),\n      hasOutline = _useState4[0],\n      setOutline = _useState4[1];\n\n  var _useState5 = useState(false),\n      dragging = _useState5[0],\n      setDragging = _useState5[1];\n\n  var _useState6 = useState(0),\n      dragEnd = _useState6[0],\n      setDragEnd = _useState6[1];\n\n  var handleChange = function handleChange() {\n    if (Date.now() - dragEnd > 25) {\n      handleChecked(!checked);\n    }\n  };\n\n  var handleChecked = function handleChecked(newChecked) {\n    if (newChecked) {\n      setPos(20);\n    } else {\n      setPos(0);\n    }\n\n    if (newChecked !== checked) onChange(newChecked);\n  };\n\n  var startDrag = function startDrag(e) {\n    e.preventDefault();\n    setMouseDown(true);\n    setOutline(true);\n  };\n\n  var onMouseUp = function onMouseUp(e) {\n    setMouseDown(false);\n    setOutline(false);\n    setMouseUpTime(Date.now());\n\n    if (switchRef.current && dragging) {\n      var mouseRelativePos = e.clientX - switchRef.current.getBoundingClientRect().left;\n      setDragEnd(Date.now());\n      setDragging(false);\n\n      if (mouseRelativePos >= 20) {\n        handleChecked(true);\n      } else {\n        handleChecked(false);\n      }\n    }\n  };\n\n  var onMouseMove = function onMouseMove(e) {\n    if (isMouseDown && !dragging) {\n      setDragging(true);\n    }\n\n    if (switchRef.current && dragging) {\n      var halfHandle = 8;\n      var newPos = e.clientX - switchRef.current.getBoundingClientRect().left - halfHandle;\n\n      if (newPos < 0) {\n        setPos(0);\n      } else if (newPos > 20) {\n        setPos(20);\n      } else {\n        setPos(newPos);\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener('mousemove', onMouseMove);\n    return function () {\n      window.removeEventListener('mousemove', onMouseMove);\n    };\n  }, [dragging, isMouseDown]);\n  useEffect(function () {\n    window.addEventListener('mouseup', onMouseUp);\n    return function () {\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [dragging]);\n  return React.createElement(\"label\", Object.assign({\n    style: {\n      cursor: disabled ? 'not-allowed' : 'pointer',\n      filter: disabled ? 'brightness(0.9)' : 'unset'\n    }\n  }, labelProps, {\n    className: styles[\"switch\"] + \" \" + (className || ''),\n    ref: switchRef,\n    onMouseDown: disabled ? undefined : startDrag\n  }), React.createElement(\"div\", {\n    className: styles.switchBg + \" \" + (checked ? styles.isChecked : ''),\n    style: {\n      backgroundColor: checked ? onColor || '#66bb6a' : offColor || '#cccccc'\n    }\n  }), React.createElement(\"div\", {\n    id: 'dragswitch-handle',\n    className: styles.switchHandle + \" \" + (checked ? styles.isChecked : ''),\n    style: {\n      transform: \"translateX(\" + Xpos + \"px)\",\n      WebkitTransition: dragging ? undefined : 'transform .2s',\n      MozTransition: dragging ? undefined : 'transform .2s',\n      transition: dragging ? undefined : 'transform .2s',\n      boxShadow: hasOutline ? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px' : undefined,\n      backgroundColor: handleColor || '#ffffff'\n    },\n    onClick: function onClick(e) {\n      e.preventDefault();\n      setOutline(false);\n      if (!disabled) handleChange();\n    }\n  }), React.createElement(\"input\", {\n    role: 'switch',\n    \"aria-checked\": checked,\n    type: 'checkbox',\n    defaultChecked: checked,\n    onChange: handleChange,\n    onFocus: function onFocus() {\n      if (Date.now() - lastMouseUpTime > 25) setOutline(true);\n    },\n    onBlur: function onBlur() {\n      setOutline(false);\n    },\n    disabled: disabled,\n    className: styles.switchInput\n  }));\n};\n\nexport { DragSwitch, ToggleSwitch };","map":{"version":3,"sources":["../src/ToggleSwitch.tsx","../src/DragSwitch.tsx"],"names":["ToggleSwitch","className","checked","onChange","onColor","offColor","handleColor","focusShadow","disabled","labelProps","hasOutline","setOutline","useState","lastMouseUpTime","setMouseUpTime","handleChange","onMouseUp","Date","useEffect","window","style","cursor","filter","styles","backgroundColor","id","WebkitTransition","MozTransition","transition","boxShadow","role","type","defaultChecked","onFocus","onBlur","switchInput","DragSwitch","switchRef","useRef","Xpos","setPos","isMouseDown","setMouseDown","dragging","setDragging","dragEnd","setDragEnd","handleChecked","newChecked","startDrag","e","mouseRelativePos","onMouseMove","halfHandle","newPos","ref","onMouseDown","transform","onClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styles from './ToggleSwitch.module.css'\n\ninterface Props {\n\tclassName?: string\n\tchecked: boolean\n\tonChange: (checked: boolean) => void\n\tonColor?: string\n\toffColor?: string\n\thandleColor?: string\n\tfocusShadow?: string\n\tdisabled?: boolean\n\t[props: string]: any\n}\n\nconst ToggleSwitch = ({\n\tclassName,\n\tchecked,\n\tonChange,\n\tonColor,\n\toffColor,\n\thandleColor,\n\tfocusShadow,\n\tdisabled,\n\t...labelProps\n}: Props) => {\n\tconst [hasOutline, setOutline] = useState(false)\n\tconst [lastMouseUpTime, setMouseUpTime] = useState(0)\n\n\tconst handleChange = () => {\n\t\tonChange(!checked)\n\t}\n\n\tconst onMouseUp = () => {\n\t\tsetMouseUpTime(Date.now())\n\t}\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('mouseup', onMouseUp)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mouseup', onMouseUp)\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<label\n\t\t\tstyle={{\n\t\t\t\tcursor: disabled ? 'not-allowed' : 'pointer',\n\t\t\t\tfilter: disabled ? 'brightness(0.9)' : 'unset'\n\t\t\t}}\n\t\t\t{...labelProps}\n\t\t\tclassName={`${styles.switch} ${className || ''}`}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={`${styles.switchBg} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: checked\n\t\t\t\t\t\t? onColor || '#66bb6a'\n\t\t\t\t\t\t: offColor || '#cccccc'\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tid='dragswitch-handle'\n\t\t\t\tclassName={`${styles.switchHandle} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tWebkitTransition: 'transform .2s',\n\t\t\t\t\tMozTransition: 'transform .2s',\n\t\t\t\t\ttransition: 'transform .2s',\n\t\t\t\t\tboxShadow: hasOutline\n\t\t\t\t\t\t? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px'\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tbackgroundColor: handleColor || '#ffffff'\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\trole='switch'\n\t\t\t\taria-checked={checked}\n\t\t\t\ttype='checkbox'\n\t\t\t\tdefaultChecked={checked}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonFocus={() => {\n\t\t\t\t\t// prevent focus after user clicked switch, allows keyboard to focus switch\n\t\t\t\t\tif (Date.now() - lastMouseUpTime > 25) setOutline(true)\n\t\t\t\t}}\n\t\t\t\tonBlur={() => {\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t}}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName={styles.switchInput}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n\nexport default ToggleSwitch\n","import React, { useRef, useState, useEffect } from 'react'\nimport styles from './ToggleSwitch.module.css'\n\ninterface Props {\n\tclassName?: string\n\tchecked: boolean\n\tonChange: (checked: boolean) => void\n\tonColor?: string\n\toffColor?: string\n\thandleColor?: string\n\tfocusShadow?: string\n\tdisabled?: boolean\n\t[props: string]: any\n}\n\nconst DragSwitch = ({\n\tclassName,\n\tchecked,\n\tonChange,\n\tonColor,\n\toffColor,\n\thandleColor,\n\tfocusShadow,\n\tdisabled,\n\t...labelProps\n}: Props) => {\n\tconst switchRef = useRef<HTMLLabelElement>(null)\n\tconst [Xpos, setPos] = useState(checked ? 20 : 0)\n\tconst [isMouseDown, setMouseDown] = useState(false)\n\tconst [lastMouseUpTime, setMouseUpTime] = useState(0)\n\tconst [hasOutline, setOutline] = useState(false)\n\tconst [dragging, setDragging] = useState(false)\n\tconst [dragEnd, setDragEnd] = useState(0)\n\n\tconst handleChange = () => {\n\t\t// prevent setting checked if user was just dragging\n\t\tif (Date.now() - dragEnd > 25) {\n\t\t\thandleChecked(!checked)\n\t\t}\n\t}\n\n\tconst handleChecked = (newChecked: boolean) => {\n\t\tif (newChecked) {\n\t\t\tsetPos(20)\n\t\t} else {\n\t\t\tsetPos(0)\n\t\t}\n\n\t\tif (newChecked !== checked) onChange(newChecked)\n\t}\n\n\tconst startDrag = (e: React.MouseEvent) => {\n\t\te.preventDefault()\n\n\t\tsetMouseDown(true)\n\t\tsetOutline(true)\n\t}\n\n\tconst onMouseUp = (e: MouseEvent) => {\n\t\tsetMouseDown(false)\n\t\tsetOutline(false)\n\t\tsetMouseUpTime(Date.now())\n\n\t\tif (switchRef.current && dragging) {\n\t\t\tconst mouseRelativePos =\n\t\t\t\te.clientX - switchRef.current.getBoundingClientRect().left\n\n\t\t\tsetDragEnd(Date.now())\n\t\t\tsetDragging(false)\n\n\t\t\tif (mouseRelativePos >= 20) {\n\t\t\t\thandleChecked(true)\n\t\t\t} else {\n\t\t\t\thandleChecked(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst onMouseMove = (e: MouseEvent) => {\n\t\tif (isMouseDown && !dragging) {\n\t\t\tsetDragging(true)\n\t\t}\n\n\t\tif (switchRef.current && dragging) {\n\t\t\tconst halfHandle = 8\n\t\t\tconst newPos =\n\t\t\t\te.clientX - switchRef.current.getBoundingClientRect().left - halfHandle\n\n\t\t\tif (newPos < 0) {\n\t\t\t\tsetPos(0)\n\t\t\t} else if (newPos > 20) {\n\t\t\t\tsetPos(20)\n\t\t\t} else {\n\t\t\t\tsetPos(newPos)\n\t\t\t}\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\t// onMouseMove function relies on dragging and isMouseDown state\n\t\twindow.addEventListener('mousemove', onMouseMove)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mousemove', onMouseMove)\n\t\t}\n\t}, [dragging, isMouseDown])\n\n\tuseEffect(() => {\n\t\t// onMouseUp function relies on dragging state when setting value\n\t\twindow.addEventListener('mouseup', onMouseUp)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mouseup', onMouseUp)\n\t\t}\n\t}, [dragging])\n\n\treturn (\n\t\t<label\n\t\t\tstyle={{\n\t\t\t\tcursor: disabled ? 'not-allowed' : 'pointer',\n\t\t\t\tfilter: disabled ? 'brightness(0.9)' : 'unset'\n\t\t\t}}\n\t\t\t{...labelProps}\n\t\t\tclassName={`${styles.switch} ${className || ''}`}\n\t\t\tref={switchRef}\n\t\t\tonMouseDown={disabled ? undefined : startDrag}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={`${styles.switchBg} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: checked\n\t\t\t\t\t\t? onColor || '#66bb6a'\n\t\t\t\t\t\t: offColor || '#cccccc'\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tid='dragswitch-handle'\n\t\t\t\tclassName={`${styles.switchHandle} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform: `translateX(${Xpos}px)`,\n\t\t\t\t\tWebkitTransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\tMozTransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\ttransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\tboxShadow: hasOutline\n\t\t\t\t\t\t? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px'\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tbackgroundColor: handleColor || '#ffffff'\n\t\t\t\t}}\n\t\t\t\tonClick={e => {\n\t\t\t\t\te.preventDefault()\n\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t\tif (!disabled) handleChange()\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\trole='switch'\n\t\t\t\taria-checked={checked}\n\t\t\t\ttype='checkbox'\n\t\t\t\tdefaultChecked={checked}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonFocus={() => {\n\t\t\t\t\t// prevent focus after user clicked/dragged switch\n\t\t\t\t\tif (Date.now() - lastMouseUpTime > 25) setOutline(true)\n\t\t\t\t}}\n\t\t\t\tonBlur={() => {\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t}}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName={styles.switchInput}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n\nexport default DragSwitch\n"]},"metadata":{},"sourceType":"module"}